#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aplicacion10
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionPedidos")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertempresas(empresas instance);
    partial void Updateempresas(empresas instance);
    partial void Deleteempresas(empresas instance);
    partial void Insertempleados(empleados instance);
    partial void Updateempleados(empleados instance);
    partial void Deleteempleados(empleados instance);
    partial void Insertcargos(cargos instance);
    partial void Updatecargos(cargos instance);
    partial void Deletecargos(cargos instance);
    partial void Insertcargos_empleados(cargos_empleados instance);
    partial void Updatecargos_empleados(cargos_empleados instance);
    partial void Deletecargos_empleados(cargos_empleados instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Aplicacion10.Properties.Settings.Default.CrudLinqSql, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<empresas> empresas
		{
			get
			{
				return this.GetTable<empresas>();
			}
		}
		
		public System.Data.Linq.Table<empleados> empleados
		{
			get
			{
				return this.GetTable<empleados>();
			}
		}
		
		public System.Data.Linq.Table<cargos> cargos
		{
			get
			{
				return this.GetTable<cargos>();
			}
		}
		
		public System.Data.Linq.Table<cargos_empleados> cargos_empleados
		{
			get
			{
				return this.GetTable<cargos_empleados>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empresas")]
	public partial class empresas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private EntitySet<empleados> _empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public empresas()
		{
			this._empleados = new EntitySet<empleados>(new Action<empleados>(this.attach_empleados), new Action<empleados>(this.detach_empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresas_empleados", Storage="_empleados", ThisKey="Id", OtherKey="IdEmpresa")]
		public EntitySet<empleados> empleados
		{
			get
			{
				return this._empleados;
			}
			set
			{
				this._empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_empleados(empleados entity)
		{
			this.SendPropertyChanging();
			entity.empresas = this;
		}
		
		private void detach_empleados(empleados entity)
		{
			this.SendPropertyChanging();
			entity.empresas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empleados")]
	public partial class empleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private int _IdEmpresa;
		
		private EntitySet<cargos_empleados> _cargos_empleados;
		
		private EntityRef<empresas> _empresas;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnIdEmpresaChanging(int value);
    partial void OnIdEmpresaChanged();
    #endregion
		
		public empleados()
		{
			this._cargos_empleados = new EntitySet<cargos_empleados>(new Action<cargos_empleados>(this.attach_cargos_empleados), new Action<cargos_empleados>(this.detach_cargos_empleados));
			this._empresas = default(EntityRef<empresas>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEmpresa", DbType="Int NOT NULL")]
		public int IdEmpresa
		{
			get
			{
				return this._IdEmpresa;
			}
			set
			{
				if ((this._IdEmpresa != value))
				{
					if (this._empresas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEmpresaChanging(value);
					this.SendPropertyChanging();
					this._IdEmpresa = value;
					this.SendPropertyChanged("IdEmpresa");
					this.OnIdEmpresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleados_cargos_empleados", Storage="_cargos_empleados", ThisKey="Id", OtherKey="IdEmpleado")]
		public EntitySet<cargos_empleados> cargos_empleados
		{
			get
			{
				return this._cargos_empleados;
			}
			set
			{
				this._cargos_empleados.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresas_empleados", Storage="_empresas", ThisKey="IdEmpresa", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empresas empresas
		{
			get
			{
				return this._empresas.Entity;
			}
			set
			{
				empresas previousValue = this._empresas.Entity;
				if (((previousValue != value) 
							|| (this._empresas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empresas.Entity = null;
						previousValue.empleados.Remove(this);
					}
					this._empresas.Entity = value;
					if ((value != null))
					{
						value.empleados.Add(this);
						this._IdEmpresa = value.Id;
					}
					else
					{
						this._IdEmpresa = default(int);
					}
					this.SendPropertyChanged("empresas");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cargos_empleados(cargos_empleados entity)
		{
			this.SendPropertyChanging();
			entity.empleados = this;
		}
		
		private void detach_cargos_empleados(cargos_empleados entity)
		{
			this.SendPropertyChanging();
			entity.empleados = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cargos")]
	public partial class cargos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Cargo;
		
		private EntitySet<cargos_empleados> _cargos_empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCargoChanging(string value);
    partial void OnCargoChanged();
    #endregion
		
		public cargos()
		{
			this._cargos_empleados = new EntitySet<cargos_empleados>(new Action<cargos_empleados>(this.attach_cargos_empleados), new Action<cargos_empleados>(this.detach_cargos_empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cargo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cargo
		{
			get
			{
				return this._Cargo;
			}
			set
			{
				if ((this._Cargo != value))
				{
					this.OnCargoChanging(value);
					this.SendPropertyChanging();
					this._Cargo = value;
					this.SendPropertyChanged("Cargo");
					this.OnCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargos_cargos_empleados", Storage="_cargos_empleados", ThisKey="Id", OtherKey="IdCargo")]
		public EntitySet<cargos_empleados> cargos_empleados
		{
			get
			{
				return this._cargos_empleados;
			}
			set
			{
				this._cargos_empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cargos_empleados(cargos_empleados entity)
		{
			this.SendPropertyChanging();
			entity.cargos = this;
		}
		
		private void detach_cargos_empleados(cargos_empleados entity)
		{
			this.SendPropertyChanging();
			entity.cargos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cargos_empleados")]
	public partial class cargos_empleados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdEmpleado;
		
		private int _IdCargo;
		
		private EntityRef<cargos> _cargos;
		
		private EntityRef<empleados> _empleados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdEmpleadoChanging(int value);
    partial void OnIdEmpleadoChanged();
    partial void OnIdCargoChanging(int value);
    partial void OnIdCargoChanged();
    #endregion
		
		public cargos_empleados()
		{
			this._cargos = default(EntityRef<cargos>);
			this._empleados = default(EntityRef<empleados>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEmpleado", DbType="Int NOT NULL")]
		public int IdEmpleado
		{
			get
			{
				return this._IdEmpleado;
			}
			set
			{
				if ((this._IdEmpleado != value))
				{
					if (this._empleados.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._IdEmpleado = value;
					this.SendPropertyChanged("IdEmpleado");
					this.OnIdEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCargo", DbType="Int NOT NULL")]
		public int IdCargo
		{
			get
			{
				return this._IdCargo;
			}
			set
			{
				if ((this._IdCargo != value))
				{
					if (this._cargos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCargoChanging(value);
					this.SendPropertyChanging();
					this._IdCargo = value;
					this.SendPropertyChanged("IdCargo");
					this.OnIdCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargos_cargos_empleados", Storage="_cargos", ThisKey="IdCargo", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public cargos cargos
		{
			get
			{
				return this._cargos.Entity;
			}
			set
			{
				cargos previousValue = this._cargos.Entity;
				if (((previousValue != value) 
							|| (this._cargos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cargos.Entity = null;
						previousValue.cargos_empleados.Remove(this);
					}
					this._cargos.Entity = value;
					if ((value != null))
					{
						value.cargos_empleados.Add(this);
						this._IdCargo = value.Id;
					}
					else
					{
						this._IdCargo = default(int);
					}
					this.SendPropertyChanged("cargos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleados_cargos_empleados", Storage="_empleados", ThisKey="IdEmpleado", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empleados empleados
		{
			get
			{
				return this._empleados.Entity;
			}
			set
			{
				empleados previousValue = this._empleados.Entity;
				if (((previousValue != value) 
							|| (this._empleados.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empleados.Entity = null;
						previousValue.cargos_empleados.Remove(this);
					}
					this._empleados.Entity = value;
					if ((value != null))
					{
						value.cargos_empleados.Add(this);
						this._IdEmpleado = value.Id;
					}
					else
					{
						this._IdEmpleado = default(int);
					}
					this.SendPropertyChanged("empleados");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
